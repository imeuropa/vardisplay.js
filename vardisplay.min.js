let vardisplay={debug:!1,enableDebug:()=>(vardisplay.debug=!0,"OK"),log:a=>console.log(`%c[VARDISPLAY / DEBUG]%c${a}`,"color:yellow;background:black;padding:4px;","color:white;background:black;padding:4px;"),run:()=>{const html=document.getElementsByTagName("html")[0],spans=document.getElementsByTagName("span");if(!spans||0!==spans.length)for(let c=0;c<spans.length;c++){const span=spans[c],escapedMatch=span.className.replace(/([{}<>/\\\\=;$(),]*)/g,"");try{span.innerHTML=eval(escapedMatch)}catch(a){vardisplay.log(`Could not display key value for "${span.className}".`)}}const match=html.innerHTML.match(/({{(.*?)}})/g);for(let c=0;c<match.length;c++){const matchedString=match[c],xssmatch=matchedString.match(/([\<\>\=\;\$\(\)\,\/])/g);if(vardisplay.debug&&(vardisplay.log(`Matched string: ${matchedString}`),vardisplay.log(`Matched XSS: ${xssmatch}`)),!xssmatch){const escapedMatch=matchedString.replace(/([{}<>/\\\\=;$(),]*)/g,"");vardisplay.debug&&(vardisplay.log(`Escaped match: ${escapedMatch}`),vardisplay.log(`Key value: ${keyValue}`));try{const keyValue=`<span class="${escapedMatch}">${eval(escapedMatch)}</span>`;html.innerHTML=html.innerHTML.replace(matchedString,keyValue)}catch(a){vardisplay.log(`Could not display key value for "${escapedMatch}".`)}}}return"OK"},render:keyword=>{const html=document.getElementsByTagName("html")[0],regex=new RegExp(`{{${keyword}}}`,"g"),match=html.innerHTML.match(regex);if(!match||0==match.length){const spans=document.getElementsByClassName(keyword);if(spans&&0===spans.length)return!1;for(let c=0;c<spans.length;c++){const matchedString=spans[c],escapedMatch=keyword.replace(/([{}<>/\\\\=;$(),]*)/g,"");try{return matchedString.innerHTML=eval(escapedMatch),!0}catch(a){return vardisplay.log(`Could not display key value for "${escapedMatch}".`),!1}}}for(let c=0;c<match.length;c++){const matchedString=match[c],xssmatch=matchedString.match(/([\<\>\=\;\$\(\)\,\/])/g);if(vardisplay.debug&&(vardisplay.log(`Matched string: ${matchedString}`),vardisplay.log(`Matched XSS: ${xssmatch}`)),!xssmatch){const escapedMatch=matchedString.replace(/([{}<>/\\\\=;$(),]*)/g,"");vardisplay.debug&&(vardisplay.log(`Escaped match: ${escapedMatch}`),vardisplay.log(`Key value: ${keyValue}`));try{const keyValue=eval(escapedMatch);return html.innerHTML=html.innerHTML.replace(matchedString,keyValue),!0}catch(a){return vardisplay.log(`Could not display key value for "${escapedMatch}".`),!1}}}},renderAs:(a,e)=>{const t=document.getElementsByTagName("html")[0],c=new RegExp(`{{${a}}}`,"g"),l=t.innerHTML.match(c);if(!l||0==l.length){const t=document.getElementsByClassName(a);if(t&&0===t.length)return!1;for(let a=0;a<t.length;a++){const c=t[a],l=e.replace(/([{}<>/\\\\=;$(),]*)/g,"");try{return c.innerHTML=l,!0}catch(a){return console.log(a),vardisplay.log(`Could not display key value for "${l}".`),!1}}}for(let c=0;c<l.length;c++){const s=l[c],n=s.match(/([\<\>\=\;\$\(\)\,\/])/g);if(vardisplay.debug&&(vardisplay.log(`Matched string: ${s}`),vardisplay.log(`Matched XSS: ${n}`)),!n){const c=e.replace(/([{}<>/\\\\=;$(),]*)/g,"");vardisplay.debug&&(vardisplay.log(`Escaped match: ${c}`),vardisplay.log(`Key value: ${keyValue}`));try{return t.innerHTML=t.innerHTML.replace(s,c),!0}catch(e){return vardisplay.log(`Could not display key value for "${a}".`),!1}}}}};vardisplay.run();